{"version":3,"sources":["logo.svg","Calculations.js","App.js","registerServiceWorker.js","index.js"],"names":["TemperatureCalculations","fahrenheit","celsius","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","scaleNames","c","f","TemperatureInput","props","handleChange","bind","e","this","onTemperatureChange","target","value","scale","className","onChange","React","Component","TemperatureMessage","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","calc","tryConvert","toCelsius","toFahrenheit","App","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0e55146b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","class TemperatureCalculations {\n toCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n  }\n  \n toFahrenheit(celsius) {\n    return (celsius * 9 / 5) + 32;\n  }\n  \n tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if (Number.isNaN(input)) {\n      return '';\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n  }\n   \n}\n\nexport default TemperatureCalculations;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TemperatureCalculations from './Calculations';\n\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    const className = \"scale-type-\" + scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input className={className} value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\nclass TemperatureMessage extends React.Component {\n\n  render() {\n    const celsius = this.props.celsius;\n    const fahrenheit = this.props.fahrenheit;\n    \n    if (!celsius || !fahrenheit) {\n      return (\n        <div className=\"temperatureMesssage\"> \n          <h2>Watiting for values...</h2>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"temperatureMesssage\">\n        <h2>{celsius} Celsius is {fahrenheit} Fahrenheit</h2>\n      </div>);\n  };\n}\n\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const calc = new TemperatureCalculations();\n\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? calc.tryConvert(temperature, calc.toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? calc.tryConvert(temperature, calc.toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n          <hr/>\n          <TemperatureMessage celsius={celsius} fahrenheit={fahrenheit} />\n      </div>\n    );\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to Celsius to Fahrenheit Calculator!</h1>\n        </header>\n        \n        <div className=\"App-form\">\n          {/* <Convert />\n          <ShowFarenheit value=\"0\" /> */}\n          <Calculator />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}